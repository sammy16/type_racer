/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package typing;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

class ChatClient extends javax.swing.JFrame implements Runnable {
       private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private Socket socket = null;
    private Thread thread = null;
    private DataInputStream console = null;
    private DataOutputStream streamOut = null;
    private ChatClientThread client = null;
    private String names[] = new String[5];
    private  Scanner scan ;
    public String name;
    private boolean gone=false;
    public int flag=0;
    public Stack st = new Stack(); 
    /**
     * Creates new form typeracer
     * @throws IOException 
     */
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @throws IOException 
     */

   
   
    public ChatClient (String serverName, int serverPort, Socket soc,String nam) throws IOException {
        //User.socket;
        
        initComponents();
        System.out.println("Establishing connection. Please wait ...");
        try { // socket = new Socket(serverName, serverPort);
             name=nam;
           // scan= new Scanner(System.in);
            socket = soc;
            System.out.println("Connected: " + socket);
            start();
        } catch (UnknownHostException uhe) {
            System.out.println("Host unknown: " + uhe.getMessage());
        } catch (IOException ioe) {
            System.out.println("Unexpected exception: " + ioe.getMessage());
        }
    }
       public int start=0;
    public int count=0;
    public int end;
    public long start_time,end_time;
    public long speed;
    public int pos;
    String path1 = "car1.jpg";
    String path2 = "car2.jpg";
    String path3 = "car3.jpg";
    String path4 = "car4.jpg";
    public BufferedImage  image1 = ImageIO.read(new File(path1));
    public BufferedImage image2;
    public BufferedImage image3;
    public BufferedImage image4;
    int x1=55,y1=36;
    int x2,y2=89,x3,y3=145,x4,y4=199;
     public class imagepanel extends JPanel
    { 	
    	public imagepanel() {
    		setBackground(Color.white);
    	/*	this.x=x;
    		this.y=y;
    		System.out.println(x);
    		System.out.println(y);*/
    	}
    	public void paintComponent(Graphics g)
    	{	super.paintComponent(g);
        		if(image1 != null)
    		{	g.drawImage(image1, x1, y1, 100, 50, this);												
    		}
                        if(image2 != null)
    		{	g.drawImage(image2, x2, y2, 100, 50, this);
    															
    		}
                        if(image3 != null)
    		{	g.drawImage(image3, x3, y3, 100, 50, this);
    															
    		}
                        if(image4 != null)
    		{	g.drawImage(image4, x4, y4, 100, 50, this);
    															
    		}
    	}
    }
   imagepanel jPanel;
   private void initComponents() throws IOException{
    	final String val =
    			"Impossible is word thrown by small men who find it\n"
                      + "easier to live in the world they've been given than\n"
                      + "to explore the power they have to change it. Impossible\n"
                      + "is not a fact. It's an opinion. Impossible is not a \n"
                      + "declaration. It's a dare. Impossible is potential.\n"
                      + " Impossible is temporary. Impossible is nothing.";

        
       // jPanel1 = new javax.swing.JPanel();
    	
    	jPanel1 = new imagepanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Race", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(51, 51, 51)));

        jLabel1.setText("     WPM");

        jLabel2.setText("");

        jLabel3.setText("");

        jLabel4.setText("");

        jLabel5.setText("");

        jLabel6.setText("USERNAME");

        jLabel7.setText("");

        jLabel8.setText("");

        jLabel9.setText("");

        jLabel10.setText("");
        
   
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(518, 518, 518)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel5))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2)))))
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Typing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(102, 102, 102)));
      
       
        
        Font font = new Font("Verdana", Font.PLAIN, 18);
        jTextArea1.setFont(font);
    
        font = new Font("Verdana", Font.PLAIN, 16);
        jTextField1.setFont(font);
        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setText(val);
        jScrollPane1.setViewportView(jTextArea1);
        jTextField1.setText("");
        
        

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);
         addWindowListener( new WindowAdapter() {
   public void windowOpened( WindowEvent e ){
        jTextField1.requestFocus();
     }
   } );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }
    public void run() {
       
                /*
                 * get the input after every space in the line
                 */ 
                int j=count;
       final String val =
    			"Impossible is word thrown by small men who find it\n"
                      + "easier to live in the world they've been given than\n"
                      + "to explore the power they have to change it. Impossible\n"
                      + "is not a fact. It's an opinion. Impossible is not a \n"
                      + "declaration. It's a dare. Impossible is potential.\n"
                      + " Impossible is temporary. Impossible is nothing.";
     	while(val.charAt(j)!=' ')
     		j++;
     	end=j;
     	jTextArea1.setSelectionColor(Color.GREEN);	
		  Highlighter h = jTextArea1.getHighlighter();
	  		h.removeAllHighlights();
	  		try {
	  			h.addHighlight(0, end, DefaultHighlighter.DefaultPainter);
	  		} catch (Exception ble) {
	  		}
        class MyKeyListener extends KeyAdapter{
      	  public void keyPressed(KeyEvent ke){
      		  if(count==val.length()-1)
      		   jTextField1.setEditable(false);
      		  if(count==0)
                  {	start_time=System.currentTimeMillis();
                        speed=0;
      			pos=60;
      			//System.out.println(pos);
      			x1=pos;
      			jLabel2.setText(""+speed);
      			jPanel1.repaint();
                        try{
                         if(!gone){
                    gone=true;
                       
                            streamOut.writeUTF(name);
                             streamOut.flush();
                        
                }else{
                       
                            String str = x1+" "+speed;
                //System.out.println(str);
                streamOut.writeUTF(str);
                streamOut.flush();}
            } catch (IOException ioe) {
                System.out.println("Sending error: " + ioe.getMessage());
                stop();
            
                         }
                  }
      		  if(count!=0&&count%5==0)
      		{	end_time=System.currentTimeMillis();
      			speed=(count*10000)/(end_time-start_time);
      			pos=60+(count*445)/(val.length());
      			//System.out.println(pos);
      			x1=pos;
      			jLabel2.setText(""+speed);
      			jPanel1.repaint();
                        try{
                         if(!gone){
                    gone=true;
                       
                            streamOut.writeUTF(name);
                             streamOut.flush();
                        
                }else{
                       
                            String str = x1+" "+speed;
                //System.out.println(str);
                streamOut.writeUTF(str);
                streamOut.flush();}
            } catch (IOException ioe) {
                System.out.println("Sending error: " + ioe.getMessage());
                stop();
            
                         }
      		}
      	  char i = ke.getKeyChar();
      	 int j=count;
     	while(val.charAt(j)!=' '&&val.charAt(j)!='\n') {
                  j++;
              }
     	end=j;
      	  if(val.charAt(count)==i)
      	  {    if(val.charAt(count)==' '||val.charAt(count)=='\n')
      	  {		
      		jTextField1.setText("");
      		start=count+1;
      		 j=count+1;
          	while(val.charAt(j)!=' '&&val.charAt(j)!='\n') {
                  j++;
              }
          	end=j;
          	jTextArea1.setSelectionColor(Color.GREEN);	
    		  Highlighter h = jTextArea1.getHighlighter();
    	  		h.removeAllHighlights();
    	  		try {
    	  			h.addHighlight(start, end, DefaultHighlighter.DefaultPainter);
    	  		} catch (Exception ble) {
    	  		}
    	  		count++;
      		}
      	  
      		  else {
      			  if(count!=0&&val.charAt(count-1)==' ')
      				  jTextField1.setText("");
      			  String sub=val.substring(start, count);
      			if(sub.compareTo(jTextField1.getText())==0||start==count)
      			  {	  jTextArea1.setSelectionColor(Color.GREEN);	
          		  Highlighter h = jTextArea1.getHighlighter();
        	  		h.removeAllHighlights();
        	  		try {
        	  			h.addHighlight(start, end, DefaultHighlighter.DefaultPainter);
        	  		} catch (Exception ble) {
        	  		}
        	  		count++;
      				  
      				  
      				 
      			  }
      			  else{
      				 jTextArea1.setSelectionColor(Color.RED);
           	      	Highlighter h = jTextArea1.getHighlighter();
         	  		h.removeAllHighlights();
         	  		try {
         	  			h.addHighlight(start, end, DefaultHighlighter.DefaultPainter);
         	  		} catch (Exception ble) {
         	  		}
      		
      			  } 
      	  }
      	  }
      	  else
      	  {	jTextArea1.setSelectionColor(Color.RED);
      	Highlighter h = jTextArea1.getHighlighter();
	  		h.removeAllHighlights();
	  		try {
	  			h.addHighlight(start, end, DefaultHighlighter.DefaultPainter);
	  		} catch (Exception ble) {
	  		}
      		  
      	  }
      	 
      	  }
      }
        jTextField1.addKeyListener(new MyKeyListener());
       
            
        
    }
    
    public void handle(String msg) throws IOException {
        String[] temp;
            temp=msg.split(" ");
            System.out.println(msg + " ");
        if (msg.equals(".bye")) {
            System.out.println("Good bye. Press RETURN to exit ...");
            stop();
        }
        else if(temp.length<2)
        {
            
        }
        else //         System.out.println(msg);
        {  //     int n=Integer.parseInt(msg);
             ////
            
          //  String[] str=new String[4];
            if(temp[1]!=null&&temp[2]!=null)
            {if(st.search(temp[2])==-1)
            {   st.push(temp[2]);
                if(jLabel7.getText().compareTo("")==0) {
                    jLabel7.setText(temp[2]);
                    image1 = ImageIO.read(new File(path1));
                    x1=Integer.parseInt(temp[0]);
                    jPanel1.repaint();
                }
            else if(jLabel8.getText().compareTo("")==0) {
                    jLabel8.setText(temp[2]);
                     image2 = ImageIO.read(new File(path2));
                     x2=Integer.parseInt(temp[0]);
                     jPanel1.repaint();
                }
            else if(jLabel9.getText().compareTo("")==0) {
                    jLabel9.setText(temp[2]);
                     image3 = ImageIO.read(new File(path3));
                     x3=Integer.parseInt(temp[0]);
                     jPanel1.repaint();
                }
            else if(jLabel10.getText().compareTo("")==0) {
                    jLabel10.setText(temp[2]);
                     image4 = ImageIO.read(new File(path4));
                     x4=Integer.parseInt(temp[0]);
                     jPanel1.repaint();
                }
            }   
            else
            {    if(jLabel7.getText().compareTo(temp[2])==0) {
                    jLabel2.setText(temp[1]);
                    x1=Integer.parseInt(temp[0]);
                    jPanel1.repaint();
                }
            else if(jLabel8.getText().compareTo(temp[2])==0) {
                    jLabel3.setText(temp[1]);
                    x2=Integer.parseInt(temp[0]);
                    jPanel1.repaint();
                }
            else if(jLabel9.getText().compareTo(temp[2])==0) {
                    jLabel4.setText(temp[1]);
                    x3=Integer.parseInt(temp[0]);
                    jPanel1.repaint();
                }
            else if(jLabel10.getText().compareTo(temp[2])==0) {
                    jLabel5.setText(temp[1]);
                    x4=Integer.parseInt(temp[0]);
                    jPanel1.repaint();
                }
                
            }
        }
        }
        //convert string message into integer 
    }

    public void start() throws IOException {
 
        console = new DataInputStream(System.in);
        streamOut = new DataOutputStream(socket.getOutputStream());
        //String str="name";
        //streamOut.writeUTF(str);
        ///////////////////////
        if (thread == null) {
            client = new ChatClientThread(this, socket);
            thread = new Thread(this);
            thread.start();
        }
    }

    public void stop() {
        if (thread != null) {
            thread.stop();
            thread = null;
        }
        try {
            if (console != null) {
                console.close();
            }
            if (streamOut != null) {
                streamOut.close();
            }
            if (socket != null) {
                socket.close();
            }
        } catch (IOException ioe) {
            System.out.println("Error closing ...");
        }
        client.close();
        client.stop();
    }
}